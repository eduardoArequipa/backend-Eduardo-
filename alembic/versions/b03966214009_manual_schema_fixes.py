"""manual_schema_fixes

Revision ID: b03966214009
Revises: 3b66ddf9623e
Create Date: 2025-08-14 00:20:00.000000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'b03966214009'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### Manual Fixes ###

    # 1. Fix `detalle_compras` table
    # Drop old primary key if it exists from a previous failed migration
    try:
        op.drop_constraint('detalle_compras_pkey', 'detalle_compras', type_='primary')
    except Exception:
        pass
    # Add the correct primary key column if it doesn't exist
    op.add_column('detalle_compras', sa.Column('detalle_compra_id', sa.Integer(), sa.Identity(start=1), autoincrement=True, nullable=False))
    op.create_primary_key('detalle_compras_pkey', 'detalle_compras', ['detalle_compra_id'])
    
    # 2. Fix ENUM conversions using 'postgresql_using'
    
    # Enum for compras.estado
    estado_compra_enum = sa.Enum('pendiente', 'completada', 'anulada', name='estadocompraenum')
    estado_compra_enum.create(op.get_bind(), checkfirst=True)
    op.alter_column('compras', 'estado',
               type_=estado_compra_enum,
               postgresql_using='estado::text::estadocompraenum',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)

    # Enum for personas.genero
    genero_enum = sa.Enum('M', 'F', name='generoenum')
    genero_enum.create(op.get_bind(), checkfirst=True)
    op.alter_column('personas', 'genero',
               type_=genero_enum,
               postgresql_using='genero::text::generoenum',
               existing_type=sa.CHAR(length=1),
               existing_nullable=True)

    # General estado enum for other tables
    estado_enum = sa.Enum('activo', 'inactivo', 'bloqueado', name='estadoenum')
    estado_enum.create(op.get_bind(), checkfirst=True)
    
    op.alter_column('personas', 'estado',
               type_=estado_enum,
               postgresql_using='estado::text::estadoenum',
               existing_type=sa.VARCHAR(length=20),
               existing_nullable=True)

    op.alter_column('productos', 'estado',
               type_=estado_enum,
               postgresql_using='estado::text::estadoenum',
               existing_type=sa.VARCHAR(length=20),
               nullable=False)

    op.alter_column('roles', 'estado',
               type_=estado_enum,
               postgresql_using='estado::text::estadoenum',
               existing_type=sa.VARCHAR(length=20),
               existing_nullable=True)

    op.alter_column('usuarios', 'estado',
               type_=estado_enum,
               postgresql_using='estado::text::estadoenum',
               existing_type=sa.VARCHAR(length=20),
               existing_nullable=True)

    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Note: Downgrading ENUM types can be complex. This is a best-effort reversal.
    
    op.alter_column('usuarios', 'estado', type_=sa.VARCHAR(length=20))
    op.alter_column('roles', 'estado', type_=sa.VARCHAR(length=20))
    op.alter_column('productos', 'estado', type_=sa.VARCHAR(length=20))
    op.alter_column('personas', 'estado', type_=sa.VARCHAR(length=20))
    op.alter_column('personas', 'genero', type_=sa.CHAR(length=1))
    op.alter_column('compras', 'estado', type_=sa.VARCHAR(length=20))
    
    op.drop_column('detalle_compras', 'detalle_compra_id')
    
    # Drop the ENUM types
    sa.Enum(name='estadocompraenum').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='generoenum').drop(op.get_bind(), checkfirst=True)
    sa.Enum(name='estadoenum').drop(op.get_bind(), checkfirst=True)
    
    # ### end Alembic commands ###